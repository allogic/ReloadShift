#pragma once

#include <Core.h>

class Registry
{
public:

  ////////////////////////////////////////////////////////
  // Primitives
  ////////////////////////////////////////////////////////

  template<typename T>
  using RegistryMap = std::map<std::string, T>;

public:

  ////////////////////////////////////////////////////////
  // Registry state
  ////////////////////////////////////////////////////////

  template<typename T>
  static inline RegistryMap<T> mRegistry = {};

public:

  ////////////////////////////////////////////////////////
  // Singleton
  ////////////////////////////////////////////////////////

  static inline Registry& Instance() { static Registry registry; return registry; }

public:

  ////////////////////////////////////////////////////////
  // Constructor
  ////////////////////////////////////////////////////////

  Registry() = default;

public:

  ////////////////////////////////////////////////////////
  // Getter
  ////////////////////////////////////////////////////////

  template<typename T>
  inline RegistryMap<T> const& GetRegistryFor() const { return mRegistry<T>; }

  template<typename T>
  inline T& Get(std::string const& key) const noexcept { return mRegistry<T>[key]; }

public:

  ////////////////////////////////////////////////////////
  // Setter
  ////////////////////////////////////////////////////////

  template<typename T>
  inline void Set(std::string const& key, T const& value) const noexcept { mRegistry<T>[key] = value; }
};